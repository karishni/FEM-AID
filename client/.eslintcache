[{"D:\\github\\Discussion-Forum\\client\\src\\index.js":"1","D:\\github\\Discussion-Forum\\client\\src\\reportWebVitals.js":"2","D:\\github\\Discussion-Forum\\client\\src\\App.js":"3","D:\\github\\Discussion-Forum\\client\\src\\services\\httpService.js":"4","D:\\github\\Discussion-Forum\\client\\src\\components\\diabetes.js":"5","D:\\github\\Discussion-Forum\\client\\src\\components\\Health.js":"6","D:\\github\\Discussion-Forum\\client\\src\\components\\DiseaseDetection.js":"7","D:\\github\\Discussion-Forum\\client\\src\\components\\pcos.js":"8","D:\\github\\Discussion-Forum\\client\\src\\components\\not-found.jsx":"9","D:\\github\\Discussion-Forum\\client\\src\\components\\logout.jsx":"10","D:\\github\\Discussion-Forum\\client\\src\\components\\dashboard.jsx":"11","D:\\github\\Discussion-Forum\\client\\src\\components\\createpost.jsx":"12","D:\\github\\Discussion-Forum\\client\\src\\components\\diabetesForm.jsx":"13","D:\\github\\Discussion-Forum\\client\\src\\components\\PostPage.jsx":"14","D:\\github\\Discussion-Forum\\client\\src\\components\\register.jsx":"15","D:\\github\\Discussion-Forum\\client\\src\\components\\log.jsx":"16","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\protectedRoute.jsx":"17","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\jumbotron.jsx":"18","D:\\github\\Discussion-Forum\\client\\src\\components\\navbar.jsx":"19","D:\\github\\Discussion-Forum\\client\\src\\services\\postCreateService.js":"20","D:\\github\\Discussion-Forum\\client\\src\\services\\userService.js":"21","D:\\github\\Discussion-Forum\\client\\src\\services\\authService.js":"22","D:\\github\\Discussion-Forum\\client\\src\\utils\\paginate.js":"23","D:\\github\\Discussion-Forum\\client\\src\\components\\posts.jsx":"24","D:\\github\\Discussion-Forum\\client\\src\\components\\listgroup.jsx":"25","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\form.jsx":"26","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\pagination.jsx":"27","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\input.jsx":"28","D:\\github\\Discussion-Forum\\client\\src\\components\\createReply.jsx":"29","D:\\github\\Discussion-Forum\\client\\src\\services\\replyCreateService.js":"30"},{"size":988,"mtime":1649245044753,"results":"31","hashOfConfig":"32"},{"size":375,"mtime":1649245044754,"results":"33","hashOfConfig":"32"},{"size":2880,"mtime":1652116069807,"results":"34","hashOfConfig":"32"},{"size":618,"mtime":1649245044756,"results":"35","hashOfConfig":"32"},{"size":6887,"mtime":1652117910407,"results":"36","hashOfConfig":"32"},{"size":6796,"mtime":1652116069881,"results":"37","hashOfConfig":"32"},{"size":6437,"mtime":1652117827090,"results":"38","hashOfConfig":"32"},{"size":14357,"mtime":1652116069887,"results":"39","hashOfConfig":"32"},{"size":712,"mtime":1649245044748,"results":"40","hashOfConfig":"32"},{"size":251,"mtime":1649245044747,"results":"41","hashOfConfig":"32"},{"size":3599,"mtime":1649245044741,"results":"42","hashOfConfig":"32"},{"size":4023,"mtime":1649245044740,"results":"43","hashOfConfig":"32"},{"size":3460,"mtime":1649245044745,"results":"44","hashOfConfig":"32"},{"size":5534,"mtime":1649245044735,"results":"45","hashOfConfig":"32"},{"size":5676,"mtime":1649338013648,"results":"46","hashOfConfig":"32"},{"size":4248,"mtime":1649338118521,"results":"47","hashOfConfig":"32"},{"size":563,"mtime":1649245044739,"results":"48","hashOfConfig":"32"},{"size":401,"mtime":1649338397507,"results":"49","hashOfConfig":"32"},{"size":2491,"mtime":1652116069886,"results":"50","hashOfConfig":"32"},{"size":279,"mtime":1649245044772,"results":"51","hashOfConfig":"32"},{"size":287,"mtime":1649245044774,"results":"52","hashOfConfig":"32"},{"size":230,"mtime":1649245044755,"results":"53","hashOfConfig":"32"},{"size":199,"mtime":1649245044776,"results":"54","hashOfConfig":"32"},{"size":1067,"mtime":1649245044749,"results":"55","hashOfConfig":"32"},{"size":586,"mtime":1649245044745,"results":"56","hashOfConfig":"32"},{"size":1343,"mtime":1649245044736,"results":"57","hashOfConfig":"32"},{"size":996,"mtime":1649245044739,"results":"58","hashOfConfig":"32"},{"size":489,"mtime":1649245044737,"results":"59","hashOfConfig":"32"},{"size":1938,"mtime":1649245044740,"results":"60","hashOfConfig":"32"},{"size":238,"mtime":1649245044773,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"cegi57",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\github\\Discussion-Forum\\client\\src\\index.js",[],["131","132"],"D:\\github\\Discussion-Forum\\client\\src\\reportWebVitals.js",[],"D:\\github\\Discussion-Forum\\client\\src\\App.js",[],"D:\\github\\Discussion-Forum\\client\\src\\services\\httpService.js",["133"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\naxios.defaults.headers.common[\"x-auth-token\"] = localStorage.getItem(\"token\");\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    toast(\"An unexpected error occured!\");\r\n  }\r\n  console.log(error);\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n};\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\diabetes.js",["134"],"D:\\github\\Discussion-Forum\\client\\src\\components\\Health.js",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\DiseaseDetection.js",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\pcos.js",["135"],"import './Glass.css'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\n//var axios = require('axios');\r\n//var FormData = require('form-data');\r\n\r\n\r\nfunction PCOS() {\r\n  const [age, setAge] = useState('')\r\n  const [pregnant, setPregnant] = useState('')\r\n  const [abortions, setAbortions] = useState('')\r\n  const [bloated, setBloated] = useState('')\r\n  const [facialHair, setFacialHair] = useState('')\r\n  const [chestHair, setChestHair] = useState('')\r\n  const [looseWeight, setLooseWeight] = useState('')\r\n  const [moodSwings, setMoodSwings] = useState('')\r\n  const [anxiety, setAnxiety] = useState(false)\r\n  const [sleep, setSleep] = useState('')\r\n  const [weightGain, setWeightGain] = useState('')\r\n  const [hairGrowth, setHairGrowth] = useState('')\r\n  const [skinDarkening, setSkinDarkening] = useState('')\r\n  const [hairLoss, setHairLoss] = useState('')\r\n  const [pimples, setPimples] = useState('')\r\n  const [fastFood, setFastFood] = useState('')\r\n  const [exercise, setExercise] = useState('')\r\n  const [weight, setWeight] = useState('')\r\n  const [height, setHeight] = useState('')\r\n  const [bmi, setBMI] = useState('')\r\n  const [cycleMonths, setCycleMonths] = useState('')\r\n  const [cycleLength, setCycleLength] = useState('')\r\n  const [marriageStatus, setMarriageStatus] = useState('')\r\n  const [hip, setHip] = useState('')\r\n  const [waist, setWaist] = useState('')\r\n  const [pcos, setPCOS] = useState('')\r\n  const [predicted, setPredicted] = useState(false)\r\n \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    var data = new FormData();\r\n    data.append(' Age (yrs)', age);\r\n    data.append('Pregnant(Yes/No)', pregnant);\r\n    data.append('No of abortions', abortions);\r\n    data.append('Bloated(Yes/No)', bloated);\r\n    data.append('Do you have facial hair(Yes/No)', facialHair);\r\n    data.append('Do you have chest hair(Yes/No)', chestHair);\r\n    data.append('Is it difficult for you to loose weight(Yes/No)', looseWeight);\r\n    data.append('Do you often have mood swings(Yes/No)', moodSwings);\r\n    data.append('Anxiety/Depression/Stress(Yes/No)', anxiety);\r\n    data.append('Irregular sleep(Yes/No)', sleep);\r\n    data.append('Have you experienced sudden weight gain(Yes/No)', weightGain);\r\n    data.append('Hair growth(Yes/No)', hairGrowth);\r\n    data.append('Skin darkening (Yes/No)', skinDarkening);\r\n    data.append('Hair loss(Yes/No)', hairLoss);\r\n    data.append('Do you have pimples(Yes/No)', pimples);\r\n    data.append('Do you frequently eat fast food (Yes/No)', fastFood);\r\n    data.append('Do you exercise regularly(Yes/No)', exercise);\r\n    data.append('Weight (Kg)', weight);\r\n    data.append('Height(Cm) ', height);\r\n    data.append('BMI', bmi);\r\n    data.append('Cycle(months)', cycleMonths);\r\n    data.append('Cycle length(days)', cycleLength);\r\n    data.append('Marriage Status (Yrs)', marriageStatus);\r\n    data.append('Hip(inch)', hip);\r\n    data.append('Waist(inch)', waist);\r\n    \r\n    var config = {\r\n      method: 'post',\r\n      url: 'https://cors-anywhere.herokuapp.com/https://fem-aid-pcos.herokuapp.com/predict',\r\n      headers: { \r\n        'content-type': 'string'\r\n      },\r\n      data : data\r\n    };\r\n    \r\n    axios(config)\r\n    .then(function (response) {\r\n      console.log(response.data.pcos);\r\n      if (response.data.pcos === '1'){\r\n        setPCOS('Yes')\r\n      }else{\r\n        setPCOS('No')\r\n      }\r\n      setPredicted(true);\r\n      console.log(predicted)\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n    \r\n  }\r\n\r\n  const reset = () => {\r\n    // setPregnancies('')\r\n    // setGlucose('')\r\n    // setBloodPressure('')\r\n    // setSkinThickness('')\r\n    // setInsulin('')\r\n    // setBMI('')\r\n    // setDiabetesPedigreeFunction('')\r\n    // setAge('')\r\n  }\r\n\r\n  return (\r\n    <div className = \"row\">\r\n    {(predicted) ? ((pcos ==='Yes')? (\r\n      <div className = \"column\">{pcos}</div>)\r\n      :(<div className = \"column\">{pcos}</div>)): (\r\n    <div className = \"column\">PCOS info</div>\r\n    )}\r\n    <div className=\"glass column\">\r\n      <form onSubmit={(e) => handleSubmit(e)} className=\"glass__form\">\r\n        <h2>PCOS</h2>\r\n        <div className=\"glass__form__group\">\r\n          <label>Age</label><br/>\r\n          <input\r\n            id=\"age\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"number\"\r\n            value={age}\r\n            onChange={(e) => setAge(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Are you pregnant?</label><br/>\r\n          <input\r\n            id=\"age\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={pregnant}\r\n            onChange={(e) => setPregnant(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Have you had any abortions? If so, how many?</label><br/>\r\n          <input\r\n            id=\"abortion\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"number\"\r\n            value={abortions}\r\n            onChange={(e) => setAbortions(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you feel bloated? (Yes/No)</label><br/>\r\n          <input\r\n            id=\"bloated\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={bloated}\r\n            onChange={(e) => setBloated(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you have facial hair?</label><br/>\r\n          <input\r\n            id=\"facial hair\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={facialHair}\r\n            onChange={(e) => setFacialHair(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you have chest hair?</label><br/>\r\n          <input\r\n            id=\"chesthair\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={chestHair}\r\n            onChange={(e) => setChestHair(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Is it difficult for you to loose weight?</label><br/>\r\n          <input\r\n            id=\"looseweights\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={looseWeight}\r\n            onChange={(e) => setLooseWeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you often have mood swings? (Yes/No)</label><br/>\r\n          <input\r\n            id=\"moodswings\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={moodSwings}\r\n            onChange={(e) => setMoodSwings(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Anxiety/Depression/Stress(Yes/No)</label><br/>\r\n          <input\r\n            id=\"anxiety\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={anxiety}\r\n            onChange={(e) => setAnxiety(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Irregular sleep(Yes/No)</label><br/>\r\n          <input\r\n            id=\"sleep\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={sleep}\r\n            onChange={(e) => setSleep(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Have you experienced sudden weight gain(Yes/No)</label><br/>\r\n          <input\r\n            id=\"weightgain\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={weightGain}\r\n            onChange={(e) => setWeightGain(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Hair growth(Yes/No)</label><br/>\r\n          <input\r\n            id=\"hairgrowth\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={hairGrowth}\r\n            onChange={(e) => setHairGrowth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Skin darkening (Yes/No)</label><br/>\r\n          <input\r\n            id=\"skin\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={skinDarkening}\r\n            onChange={(e) => setSkinDarkening(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Hair loss(Yes/No)</label><br/>\r\n          <input\r\n            id=\"hairloss\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={hairLoss}\r\n            onChange={(e) => setHairLoss(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you have pimples(Yes/No)</label><br/>\r\n          <input\r\n            id=\"pimples\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={pimples}\r\n            onChange={(e) => setPimples(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you frequently eat fast food (Yes/No)</label><br/>\r\n          <input\r\n            id=\"fastfood\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={fastFood}\r\n            onChange={(e) => setFastFood(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Do you exercise regularly(Yes/No)</label><br/>\r\n          <input\r\n            id=\"exercise\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"text\"\r\n            value={exercise}\r\n            onChange={(e) => setExercise(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Weight (Kg)</label><br/>\r\n          <input\r\n            id=\"weight\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"number\"\r\n            value={weight}\r\n            onChange={(e) => setWeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>Height(Cm) </label><br/>\r\n          <input\r\n            id=\"height\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"number\"\r\n            value={height}\r\n            onChange={(e) => setHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"glass__form__group\">\r\n          <label>BMI</label><br/>\r\n          <input\r\n            id=\"bmi\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Pregnancies\"\r\n            //required\r\n            type=\"number\"\r\n            value={bmi}\r\n            onChange={(e) => setBMI(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <label>Cycle(months)</label><br/>\r\n          <input\r\n            id=\"Cycle(months)\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Glucose\"\r\n            //required\r\n            type=\"number\"\r\n            value={cycleMonths}\r\n            onChange={(e) => setCycleMonths(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <label>Cycle length(days)</label><br/>\r\n          <input\r\n            id=\"Cycle length(days)\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"BloodPressure\"\r\n            //required\r\n            type=\"number\"\r\n            value={cycleLength}\r\n            onChange={(e) => setCycleLength(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <label>Marriage Status (Yrs)</label><br/>\r\n          <input\r\n            id=\"marriage\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"SkinThickness\"\r\n            //required\r\n            type=\"number\"\r\n            value={marriageStatus}\r\n            onChange={(e) => setMarriageStatus(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <label>Hip(inch)</label><br/>\r\n          <input\r\n            id=\"hip\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"Insulin\"\r\n            //required\r\n            type=\"number\"\r\n            value={hip}\r\n            onChange={(e) => setHip(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <label>Waist(inch)</label><br/>\r\n          <input\r\n            id=\"waist\"\r\n            className=\"glass__form__input\"\r\n            //placeholder=\"BMI\"\r\n            //required\r\n            type=\"number\"\r\n            value={waist}\r\n            onChange={(e) => setWaist(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"glass__form__group\">\r\n          <button type=\"submit\" className=\"glass__form__btn\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PCOS","D:\\github\\Discussion-Forum\\client\\src\\components\\not-found.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\logout.jsx",["136"],"import React, { Component } from \"react\";\r\n\r\nclass Logout extends Component {\r\n  componentDidMount() {\r\n    localStorage.removeItem(\"token\");\r\n    window.location = \"/dashboard\";\r\n  }\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Logout;\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\dashboard.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\createpost.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\diabetesForm.jsx",["137"],"import React from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport Input from \"./common/input\";\r\nimport Form from \"./common/form\";\r\nimport http from \"../services/httpService\";\r\nimport { tagsEndPoint } from \"../config.json\";\r\nimport { createpost } from \"../services/postCreateService\";\r\n\r\nclass DiabetesForm extends Form {\r\n  state = {\r\n    data: { Pregnancies: \"\", Glucose: \"\", BloodPressure: \"\" },\r\n    errors: { title: \"\", description: \"\", tags: [] },\r\n    tags: [],\r\n  };\r\n  schema = {\r\n    title: Joi.string().required().min(5).label(\"Title\"),\r\n    description: Joi.string().required().min(3).label(\"Description\"),\r\n    tags: Joi.array(),\r\n  };\r\n  handleTagChange = (tagID) => {\r\n    console.log(\"hello\");\r\n    let data = this.state.data;\r\n    const newtags = data.tags;\r\n    const index = newtags.indexOf(tagID);\r\n    if (index === -1) newtags.push(tagID);\r\n    else newtags.splice(index, 1);\r\n    data = {\r\n      title: data.title,\r\n      description: data.description,\r\n      tags: newtags,\r\n    };\r\n    console.log(data);\r\n    this.setState({ data });\r\n  };\r\n  async componentDidMount() {\r\n    let tags = await http.get(tagsEndPoint);\r\n    try {\r\n      this.setState({ tags: tags.data });\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        toast.error(\"Post Validation Failed!\");\r\n      }\r\n    }\r\n  }\r\n  doSubmit = async () => {\r\n    try {\r\n      const { data } = this.state;\r\n      console.log(data);\r\n      const { response } = await createpost(data);\r\n      console.log(response);\r\n      window.location = \"/dashboard\";\r\n    } catch (ex) {console.log(ex)}\r\n  };\r\n  render() {\r\n    const { data, errors, tags } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <ToastContainer />\r\n        <div className=\"container-lg\">\r\n          <h1 className=\"text-center m-2\">Diabetes Prediction</h1>\r\n          <div\r\n            className=\"container m-4 p-4 rounded\"\r\n            style={{ backgroundColor: \"#F1F1F1\" }}\r\n          >\r\n            <form onSubmit={this.handleSubmit}>\r\n              <Input\r\n                value={data.Pregnancies}\r\n                onChange={this.handleChange}\r\n                label=\"Number of Pregnancies\"\r\n                name=\"pregnancies\"\r\n                type=\"text\"\r\n                error={errors.title}\r\n              />\r\n              <div className=\"form-group\">\r\n                <Input\r\n                  value={data.Glucose}\r\n                  onChange={this.handleChange}\r\n                  label=\"Glucose\"\r\n                  name=\"glucose\"\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                />\r\n                {errors.description && (\r\n                  <div className=\"alert-info\">{errors.description}</div>\r\n                )}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"tags\">Related Tags</label>\r\n                <br />\r\n                {errors.tags && <div className=\"alert-info\">{errors.tags}</div>}\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <button\r\n                  className=\"btn btn-primary mt-4\"\r\n                  disabled={this.validate()}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DiabetesForm;\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\PostPage.jsx",["138","139"],"import React, { Component } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport \"moment-timezone\";\r\nimport { PersonCircle, HandThumbsUpFill } from \"react-bootstrap-icons\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport http from \"../services/httpService\";\r\nimport { postEndPoint, repliesEndPoint } from \"../config.json\";\r\nimport PostReply from \"./createReply\";\r\n\r\nclass PostPage extends Component {\r\n  state = {\r\n    post: {\r\n      description: \"\",\r\n      title: \"\",\r\n      tags: [],\r\n      author: [],\r\n      upvotes: [],\r\n      views: 0,\r\n    },\r\n    replies: [],\r\n  };\r\n  async componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    const { data: post } = await http.get(postEndPoint + \"/\" + id);\r\n    const { data: replies } = await http.get(repliesEndPoint + \"/\" + id);\r\n    this.setState({ post: post, replies: replies });\r\n  }\r\n  checkLike() {\r\n    const { user } = this.props;\r\n    const { post } = this.state;\r\n    //console.log(user);\r\n    if (user && post.upvotes && post.upvotes.includes(user._id)) return true;\r\n    else return false;\r\n  }\r\n  checkReplyLike(id) {\r\n    const { replies } = this.state;\r\n    const { user } = this.props;\r\n    if (user) {\r\n      for (let i in replies) {\r\n        if (replies[i]._id === id) {\r\n          if (replies[i].upvotes.includes(user._id)) return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  handleUpvote = async () => {\r\n    try {\r\n      const { data: post } = await http.put(\r\n        postEndPoint + \"like/\" + this.props.match.params.id,\r\n        {}\r\n      );\r\n      console.log(post);\r\n      this.setState({ post: post[0] });\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        toast.error(\"You can't upvote your own post!\");\r\n      }\r\n    }\r\n  };\r\n  handleReplyUpvote = async (id) => {\r\n    try {\r\n      const replies_old = [...this.state.replies];\r\n      const reply_updated = await http.put(repliesEndPoint + \"like/\" + id, {});\r\n      const { data: replies } = await http.get(\r\n        repliesEndPoint + \"/\" + this.props.match.params.id\r\n      );\r\n      console.log(replies);\r\n      this.setState({ replies: replies });\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        toast.error(\"You can't upvote your own reply!\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    const { post, replies } = this.state;\r\n    const { user } = this.props;\r\n    return (\r\n      <div>\r\n        <ToastContainer />\r\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\r\n          <h2>{post.title}</h2>\r\n          <p className=\"mt-4\" style={{ color: \"#505050\" }}>\r\n            {post.description}\r\n          </p>\r\n          <div className=\"mt-1\">\r\n            Related Topics:\r\n            {post.tags &&\r\n              post.tags.map((tag) => (\r\n                <span className=\"badge badge-success m-1 p-2\">{tag.name}</span>\r\n              ))}\r\n            <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\r\n              <button\r\n                disabled={!user}\r\n                className={\r\n                  this.checkLike()\r\n                    ? \"btn btn-primary\"\r\n                    : \"btn btn-outline-primary\"\r\n                }\r\n                onClick={this.handleUpvote}\r\n              >\r\n                <HandThumbsUpFill className=\"mr-2\" />\r\n                {(post.upvotes && post.upvotes.length) || 0}\r\n              </button>\r\n              <p>{post.views} Views</p>\r\n            </div>\r\n            <div\r\n              class=\"d-flex w-100 justify-content-between\"\r\n              style={{ color: \"#505050\" }}\r\n            >\r\n              <div>\r\n                <PersonCircle size={30} className=\"mr-2\" />\r\n                Posted by {(post.author && post.author.username) || 0}\r\n              </div>\r\n              <p class=\"mb-1\">\r\n                <Moment fromNow>{post.time}</Moment>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {user && <PostReply id={this.props.match.params.id} />}\r\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\r\n          Showing {replies.length} replies\r\n        </div>\r\n        <div>\r\n          {replies &&\r\n            replies.map((reply) => (\r\n              <div className=\"container col-lg-6 shadow-lg p-3 mt-3 bg-body rounded\">\r\n                <div className=\"ml-4\">\r\n                  <PersonCircle size={30} className=\"mr-3\" />\r\n                  Posted by {reply.author.username}\r\n                </div>\r\n                <div className=\"m-4\">{reply.comment}</div>\r\n                <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\r\n                  <button\r\n                    className={\r\n                      this.checkReplyLike(reply._id)\r\n                        ? \"btn btn-primary\"\r\n                        : \"btn btn-outline-primary\"\r\n                    }\r\n                    disabled={!user}\r\n                    onClick={() => {\r\n                      this.handleReplyUpvote(reply._id);\r\n                    }}\r\n                  >\r\n                    <HandThumbsUpFill className=\"mr-2\" />\r\n                    {reply.upvotes.length}\r\n                  </button>\r\n                  <p class=\"mb-1\">\r\n                    <Moment fromNow style={{ color: \"#505050\" }}>\r\n                      {reply.time}\r\n                    </Moment>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostPage;\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\register.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\log.jsx",["140"],"import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport Joi from \"joi-browser\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"../App.css\";\r\nimport Input from \"../components/common/input\";\r\nimport Form from \"./common/form\";\r\nimport { login } from \"../services/authService\";\r\n\r\n// use programmatic navigation form login form to dashboard\r\n\r\n// add functionality to show react toast if the user is redierected to different locations due to history\r\nclass Log extends Form {\r\n  state = {\r\n    data: { email: \"\", password: \"\" },\r\n    errors: {\r\n      email: \"\",\r\n      passowrd: \"\",\r\n    },\r\n  };\r\n  schema = {\r\n    email: Joi.string().required().label(\"Email ID\"),\r\n    password: Joi.string().required().label(\"Password\"),\r\n  };\r\n  doSubmit = async () => {\r\n    // call the server;\r\n    try {\r\n      const { data } = this.state;\r\n      //console.log(data.email);\r\n      const { data: jwt } = await login(data.email, data.password);\r\n      localStorage.setItem(\"token\", jwt);\r\n      const { state } = this.props.location;\r\n      window.location = state ? state.from.pathname : \"/users/login\";\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        toast.error(\"Invalid Email Or Password\");\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    if (localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/dashboard\" />;\r\n    }\r\n    const { data, errors } = this.state;\r\n    return (\r\n      // <section class=\"\">\r\n        <div class=\"px-4 py-5 px-md-5 text-center text-lg-start\" style={{backgroundColor: \"hsl(0, 0%, 96%)\", height: '730px'}}>\r\n          <div class=\"container\">\r\n            <div class=\"row gx-lg-5 align-items-center\">\r\n              <div class=\"col-lg-6 mb-5 mb-lg-0\">\r\n                <h1 class=\"my-5 display-3 fw-bold ls-tight\">\r\n                  Join our community of <br />\r\n                  <span class=\"text-primary\">female <br /> healthcare</span>\r\n                </h1>\r\n                <p style={{color: \"hsl(217, 10%, 50.8%)\"}}>\r\n                  Lorem ipsum dolor sit amet consectetur adipisicing elit.\r\n                  Eveniet, itaque accusantium odio, soluta, corrupti aliquam\r\n                  quibusdam tempora at cupiditate quis eum maiores libero\r\n                  veritatis? Dicta facilis sint aliquid ipsum atque?\r\n                </p>\r\n              </div>\r\n\r\n              <div class=\"col-lg-6 mb-5 mb-lg-0\">\r\n                <div class=\"card\">\r\n                  <div class=\"card-body py-5 px-md-5\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                      \r\n                      <div class=\"form-outline mb-4\">\r\n                        <Input id=\"form3Example1\" class=\"form-control\"\r\n                          name=\"email\"\r\n                          value={data.email}\r\n                          label=\"Email ID\"\r\n                          onChange={this.handleChange}\r\n                          error={errors.email} />\r\n                      </div>\r\n\r\n                      <div class=\"form-outline mb-4\">\r\n                        <Input id=\"form3Example2\" class=\"form-control\"\r\n                        name=\"password\"\r\n                        value={data.password}\r\n                        label=\"Password\"\r\n                        onChange={this.handleChange}\r\n                        error={errors.password}\r\n                        type=\"password\"/>\r\n                      </div>\r\n\r\n                      <div className=\"text-center\">\r\n                        <button\r\n                          className=\"btn btn-primary m-3\"\r\n                          disabled={this.validate()}\r\n                        >\r\n                        Login\r\n                        </button>\r\n                      </div>\r\n\r\n                    </form>\r\n                  \r\n                  <div className=\"container col-lg-3 col-md-6 border rounder mt-1 p-3 text-center\" style={{maxWidth: '100%'}}>\r\n                    New User? <Link to=\"/users/register\">Register Here</Link>\r\n                  </div>\r\n                    \r\n                </div>\r\n               </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      //</section>    \r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Log;\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\protectedRoute.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\common\\jumbotron.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\navbar.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\services\\postCreateService.js",[],"D:\\github\\Discussion-Forum\\client\\src\\services\\userService.js",[],"D:\\github\\Discussion-Forum\\client\\src\\services\\authService.js",[],"D:\\github\\Discussion-Forum\\client\\src\\utils\\paginate.js",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\posts.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\listgroup.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\common\\form.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\common\\pagination.jsx",["141"],"import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = (props) => {\r\n  const { itemCount, pageSize, currentPage, onPageChange } = props;\r\n  const pagesCount = Math.ceil(itemCount / pageSize);\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n  return (\r\n    <div className=\"text-center\">\r\n      <ul className=\"pagination m-4\">\r\n        {pages.map((page) => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  itemCount: propTypes.number.isRequired,\r\n  pageSize: propTypes.number.isRequired,\r\n  currentPage: propTypes.number.isRequired,\r\n  onPageChange: propTypes.func.isRequired,\r\n};\r\nexport default Pagination;\r\n","D:\\github\\Discussion-Forum\\client\\src\\components\\common\\input.jsx",[],"D:\\github\\Discussion-Forum\\client\\src\\components\\createReply.jsx",["142","143","144","145","146"],"import React, { Component } from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport { Toast, ToastContainer } from \"react-toastify\";\r\nimport Form from \"./common/form\";\r\nimport { createreply } from \"../services/replyCreateService\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass PostReply extends Form {\r\n  state = {\r\n    data: {\r\n      comment: \"\",\r\n    },\r\n    errors: { comment: \"\" },\r\n  };\r\n  schema = {\r\n    comment: Joi.string().required().min(5).label(\"Comment\"),\r\n  };\r\n  doSubmit = async () => {\r\n    try {\r\n      const { data } = this.state;\r\n      const { data: reply } = await createreply(data, this.props.id);\r\n      window.location = `/post/${this.props.id}`;\r\n    } catch (ex) {}\r\n  };\r\n  render() {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <ToastContainer />\r\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Post Reply</label>\r\n              <textarea\r\n                className=\"border border-primary\"\r\n                style={{ height: 150 }}\r\n                value={data.comment}\r\n                onChange={this.handleChange}\r\n                name=\"comment\"\r\n                type=\"comment\"\r\n                id=\"comment\"\r\n                className=\"form-control\"\r\n              />\r\n              {errors.description && (\r\n                <div className=\"alert-info\">{errors.description}</div>\r\n              )}\r\n              <div className=\"text-center\">\r\n                <button\r\n                  className=\"btn btn-primary mt-4\"\r\n                  disabled={this.validate()}\r\n                >\r\n                  Post Reply\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostReply;\r\n","D:\\github\\Discussion-Forum\\client\\src\\services\\replyCreateService.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":20,"column":1,"nodeType":"153","endLine":25,"endColumn":3},{"ruleId":"154","severity":1,"message":"155","line":62,"column":9,"nodeType":"156","messageId":"157","endLine":62,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":93,"column":9,"nodeType":"156","messageId":"157","endLine":93,"endColumn":14},{"ruleId":"154","severity":1,"message":"158","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"159","line":56,"column":27,"nodeType":"156","messageId":"157","endLine":56,"endColumn":31},{"ruleId":"154","severity":1,"message":"160","line":63,"column":13,"nodeType":"156","messageId":"157","endLine":63,"endColumn":24},{"ruleId":"154","severity":1,"message":"161","line":64,"column":13,"nodeType":"156","messageId":"157","endLine":64,"endColumn":26},{"ruleId":"154","severity":1,"message":"162","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":24},{"ruleId":"163","severity":1,"message":"164","line":18,"column":13,"nodeType":"165","endLine":18,"endColumn":73},{"ruleId":"154","severity":1,"message":"166","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"167","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":15},{"ruleId":"154","severity":1,"message":"168","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":18},{"ruleId":"154","severity":1,"message":"169","line":21,"column":21,"nodeType":"156","messageId":"157","endLine":21,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":42,"column":17,"nodeType":"172","endLine":42,"endColumn":41},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'reset' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","'tags' is assigned a value but never used.","'replies_old' is assigned a value but never used.","'reply_updated' is assigned a value but never used.","'ToastContainer' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Component' is defined but never used.","'Toast' is defined but never used.","'Redirect' is defined but never used.","'reply' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]